
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 19 15:59:17 GMT+08:00 2019
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import flowchart.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 19 15:59:17 GMT+08:00 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\003\000\002\002\004\000\002\003" +
    "\011\000\002\004\004\000\002\005\004\000\002\005\002" +
    "\000\002\006\006\000\002\013\004\000\002\013\002\000" +
    "\002\016\007\000\002\016\002\000\002\014\004\000\002" +
    "\014\002\000\002\017\007\000\002\017\002\000\002\015" +
    "\004\000\002\015\002\000\002\020\007\000\002\020\002" +
    "\000\002\041\003\000\002\041\005\000\002\007\002\000" +
    "\002\007\007\000\002\011\005\000\002\012\006\000\002" +
    "\010\004\000\002\010\002\000\002\047\002\000\002\047" +
    "\004\000\002\047\005\000\002\052\010\000\002\052\006" +
    "\000\002\037\003\000\002\037\002\000\002\040\003\000" +
    "\002\040\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\043\005\000\002\024" +
    "\005\000\002\024\003\000\002\023\002\000\002\023\005" +
    "\000\002\042\004\000\002\021\006\000\002\021\005\000" +
    "\002\025\003\000\002\025\005\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\002\000\002\022\006\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\006\000\002" +
    "\022\003\000\002\027\006\000\002\030\004\000\002\031" +
    "\010\000\002\032\004\000\002\033\007\000\002\033\002" +
    "\000\002\034\002\000\002\034\004\000\002\035\004\000" +
    "\002\051\002\000\002\051\005\000\002\050\005\000\002" +
    "\050\003\000\002\050\002\000\002\036\006\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\005" +
    "\000\002\046\004\000\002\046\004\000\002\046\005\000" +
    "\002\046\004\000\002\046\004\000\002\046\005\000\002" +
    "\046\004\000\002\046\004\000\002\046\005\000\002\046" +
    "\004\000\002\046\004\000\002\046\005\000\002\046\004" +
    "\000\002\046\004\000\002\046\005\000\002\046\004\000" +
    "\002\046\004\000\002\046\005\000\002\046\004\000\002" +
    "\046\004\000\002\046\005\000\002\046\004\000\002\046" +
    "\004\000\002\046\005\000\002\046\004\000\002\046\004" +
    "\000\002\046\005\000\002\046\004\000\002\046\004\000" +
    "\002\046\005\000\002\046\004\000\002\046\004\000\002" +
    "\046\005\000\002\046\004\000\002\046\004\000\002\046" +
    "\005\000\002\046\003\000\002\046\004\000\002\046\005" +
    "\000\002\046\004\000\002\046\004\000\002\046\003\000" +
    "\002\045\005\000\002\045\006\000\002\045\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\013\005\001\002\000\004\002\001\001" +
    "\002\000\004\060\325\001\002\000\004\050\011\001\002" +
    "\000\004\002\010\001\002\000\004\002\000\001\002\000" +
    "\016\014\012\015\ufff9\016\ufff9\017\ufff9\026\ufff9\027\ufff9" +
    "\001\002\000\016\015\ufff7\016\ufff7\017\ufff7\026\ufff7\027" +
    "\ufff7\060\ufff7\001\002\000\006\026\313\027\ufffc\001\002" +
    "\000\014\015\016\016\ufff5\017\ufff5\026\ufff5\027\ufff5\001" +
    "\002\000\012\016\162\017\ufff1\026\ufff1\027\ufff1\001\002" +
    "\000\014\016\ufff3\017\ufff3\026\ufff3\027\ufff3\060\ufff3\001" +
    "\002\000\014\016\ufff6\017\ufff6\026\ufff6\027\ufff6\060\020" +
    "\001\002\000\004\037\021\001\002\000\014\004\023\005" +
    "\025\011\027\012\024\060\032\001\002\000\010\027\uffdf" +
    "\050\uffdf\057\uffdf\001\002\000\010\027\uffdc\050\uffdc\057" +
    "\uffdc\001\002\000\044\031\056\032\071\033\052\034\067" +
    "\035\053\037\072\040\073\041\055\042\064\043\063\044" +
    "\070\045\057\046\054\047\060\056\062\060\061\061\066" +
    "\001\002\000\010\027\uffdb\050\uffdb\057\uffdb\001\002\000" +
    "\014\004\023\005\025\011\027\012\051\060\032\001\002" +
    "\000\010\027\uffd6\050\uffd6\060\037\001\002\000\010\027" +
    "\uffda\050\uffda\057\uffda\001\002\000\004\050\034\001\002" +
    "\000\010\027\uffdd\050\uffdd\057\uffdd\001\002\000\010\027" +
    "\uffde\050\uffde\057\uffde\001\002\000\014\016\ufff4\017\ufff4" +
    "\026\ufff4\027\ufff4\060\ufff4\001\002\000\006\027\uffd7\050" +
    "\uffd7\001\002\000\006\051\045\052\044\001\002\000\006" +
    "\051\uffee\052\uffee\001\002\000\006\027\042\050\041\001" +
    "\002\000\010\027\uffd6\050\uffd6\060\037\001\002\000\010" +
    "\027\uffd9\050\uffd9\057\uffd9\001\002\000\006\027\uffd8\050" +
    "\uffd8\001\002\000\004\060\047\001\002\000\014\004\023" +
    "\005\025\011\027\012\024\060\032\001\002\000\006\027" +
    "\uffd5\050\uffd5\001\002\000\006\051\uffed\052\uffed\001\002" +
    "\000\010\027\uffd4\050\uffd4\057\uffd4\001\002\000\044\031" +
    "\056\032\071\033\052\034\067\035\053\037\072\040\073" +
    "\041\055\042\064\043\063\044\070\045\057\046\054\047" +
    "\060\056\062\060\061\061\066\001\002\000\044\031\056" +
    "\032\071\033\052\034\067\035\053\037\072\040\073\041" +
    "\055\042\064\043\063\044\070\045\057\046\054\047\060" +
    "\056\062\060\061\061\066\001\002\000\044\031\056\032" +
    "\071\033\052\034\067\035\053\037\072\040\073\041\055" +
    "\042\064\043\063\044\070\045\057\046\054\047\060\056" +
    "\062\060\061\061\066\001\002\000\044\031\056\032\071" +
    "\033\052\034\067\035\053\037\072\040\073\041\055\042" +
    "\064\043\063\044\070\045\057\046\054\047\060\056\062" +
    "\060\061\061\066\001\002\000\044\031\056\032\071\033" +
    "\052\034\067\035\053\037\072\040\073\041\055\042\064" +
    "\043\063\044\070\045\057\046\054\047\060\056\062\060" +
    "\061\061\066\001\002\000\044\031\056\032\071\033\052" +
    "\034\067\035\053\037\072\040\073\041\055\042\064\043" +
    "\063\044\070\045\057\046\054\047\060\056\062\060\061" +
    "\061\066\001\002\000\044\031\056\032\071\033\052\034" +
    "\067\035\053\037\072\040\073\041\055\042\064\043\063" +
    "\044\070\045\057\046\054\047\060\056\062\060\061\061" +
    "\066\001\002\000\070\021\uff89\022\uff89\023\uff89\025\uff89" +
    "\027\uff89\030\uff89\031\056\032\071\033\052\034\067\035" +
    "\053\037\072\040\073\041\055\042\064\043\063\044\070" +
    "\045\uff89\046\uff89\047\060\050\uff89\052\uff89\055\uff89\056" +
    "\062\057\uff89\060\061\061\066\001\002\000\064\021\uff81" +
    "\022\uff81\023\uff81\025\uff81\027\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\034\uff81\035\uff81\037\uff81\040\uff81\041\uff81" +
    "\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\050\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\057\uff81\001\002\000\046" +
    "\031\056\032\071\033\052\034\067\035\053\037\072\040" +
    "\073\041\055\042\064\043\063\044\070\045\057\046\054" +
    "\047\060\056\062\057\137\060\061\061\066\001\002\000" +
    "\044\031\056\032\071\033\052\034\067\035\053\037\072" +
    "\040\073\041\055\042\064\043\063\044\070\045\057\046" +
    "\054\047\060\056\062\060\061\061\066\001\002\000\044" +
    "\031\056\032\071\033\052\034\067\035\053\037\072\040" +
    "\073\041\055\042\064\043\063\044\070\045\057\046\054" +
    "\047\060\056\062\060\061\061\066\001\002\000\036\030" +
    "\134\031\103\032\076\033\107\034\077\035\101\037\104" +
    "\040\102\041\110\042\105\043\106\044\100\045\111\046" +
    "\075\001\002\000\062\021\uff84\022\uff84\023\uff84\025\uff84" +
    "\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84" +
    "\045\uff84\046\uff84\050\uff84\052\uff84\055\uff84\057\uff84\061" +
    "\133\001\002\000\044\031\056\032\071\033\052\034\067" +
    "\035\053\037\072\040\073\041\055\042\064\043\063\044" +
    "\070\045\057\046\054\047\060\056\062\060\061\061\066" +
    "\001\002\000\044\031\056\032\071\033\052\034\067\035" +
    "\053\037\072\040\073\041\055\042\064\043\063\044\070" +
    "\045\057\046\054\047\060\056\062\060\061\061\066\001" +
    "\002\000\044\031\056\032\071\033\052\034\067\035\053" +
    "\037\072\040\073\041\055\042\064\043\063\044\070\045" +
    "\057\046\054\047\060\056\062\060\061\061\066\001\002" +
    "\000\044\031\056\032\071\033\052\034\067\035\053\037" +
    "\072\040\073\041\055\042\064\043\063\044\070\045\057" +
    "\046\054\047\060\056\062\060\061\061\066\001\002\000" +
    "\044\031\056\032\071\033\052\034\067\035\053\037\072" +
    "\040\073\041\055\042\064\043\063\044\070\045\057\046" +
    "\054\047\060\056\062\060\061\061\066\001\002\000\060" +
    "\021\uffad\022\uffad\023\uffad\025\uffad\027\uffad\030\uffad\031" +
    "\103\032\076\033\107\034\077\035\101\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\050" +
    "\uffad\052\uffad\055\uffad\057\uffad\001\002\000\070\021\uff8e" +
    "\022\uff8e\023\uff8e\025\uff8e\027\uff8e\030\uff8e\031\056\032" +
    "\071\033\052\034\067\035\053\037\072\040\073\041\055" +
    "\042\064\043\063\044\070\045\uff8e\046\uff8e\047\060\050" +
    "\uff8e\052\uff8e\055\uff8e\056\062\057\uff8e\060\061\061\066" +
    "\001\002\000\070\021\uff9a\022\uff9a\023\uff9a\025\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\052\034\067\035\053" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\047\060\050\uff9a\052\uff9a\055\uff9a\056\062" +
    "\057\uff9a\060\061\061\066\001\002\000\070\021\uff94\022" +
    "\uff94\023\uff94\025\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\060\050\uff94" +
    "\052\uff94\055\uff94\056\062\057\uff94\060\061\061\066\001" +
    "\002\000\070\021\uffa3\022\uffa3\023\uffa3\025\uffa3\027\uffa3" +
    "\030\uffa3\031\056\032\071\033\052\034\067\035\053\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\060\050\uffa3\052\uffa3\055\uffa3\056\062\057" +
    "\uffa3\060\061\061\066\001\002\000\070\021\uff91\022\uff91" +
    "\023\uff91\025\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\035\uff91\037\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\045\uff91\046\uff91\047\060\050\uff91\052" +
    "\uff91\055\uff91\056\062\057\uff91\060\061\061\066\001\002" +
    "\000\070\021\uffac\022\uffac\023\uffac\025\uffac\027\uffac\030" +
    "\uffac\031\056\032\071\033\052\034\067\035\053\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\047\060\050\uffac\052\uffac\055\uffac\056\062\057\uffac" +
    "\060\061\061\066\001\002\000\070\021\uff9d\022\uff9d\023" +
    "\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\052" +
    "\034\067\035\053\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\060\050\uff9d\052\uff9d" +
    "\055\uff9d\056\062\057\uff9d\060\061\061\066\001\002\000" +
    "\070\021\uffaf\022\uffaf\023\uffaf\025\uffaf\027\uffaf\030\uffaf" +
    "\031\056\032\071\033\052\034\067\035\053\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\060\050\uffaf\052\uffaf\055\uffaf\056\062\057\uffaf\060" +
    "\061\061\066\001\002\000\070\021\uffa9\022\uffa9\023\uffa9" +
    "\025\uffa9\027\uffa9\030\uffa9\031\056\032\071\033\052\034" +
    "\067\035\053\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\060\050\uffa9\052\uffa9\055" +
    "\uffa9\056\062\057\uffa9\060\061\061\066\001\002\000\070" +
    "\021\uffa0\022\uffa0\023\uffa0\025\uffa0\027\uffa0\030\uffa0\031" +
    "\056\032\071\033\052\034\067\035\053\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
    "\060\050\uffa0\052\uffa0\055\uffa0\056\062\057\uffa0\060\061" +
    "\061\066\001\002\000\070\021\uff97\022\uff97\023\uff97\025" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\047\060\050\uff97\052\uff97\055\uff97" +
    "\056\062\057\uff97\060\061\061\066\001\002\000\070\021" +
    "\uffa6\022\uffa6\023\uffa6\025\uffa6\027\uffa6\030\uffa6\031\056" +
    "\032\071\033\052\034\067\035\053\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\060" +
    "\050\uffa6\052\uffa6\055\uffa6\056\062\057\uffa6\060\061\061" +
    "\066\001\002\000\070\021\uff8b\022\uff8b\023\uff8b\025\uff8b" +
    "\027\uff8b\030\uff8b\031\056\032\071\033\052\034\067\035" +
    "\053\037\072\040\073\041\055\042\064\043\063\044\070" +
    "\045\uff8b\046\054\047\060\050\uff8b\052\uff8b\055\uff8b\056" +
    "\062\057\uff8b\060\061\061\066\001\002\000\060\021\uff8a" +
    "\022\uff8a\023\uff8a\025\uff8a\027\uff8a\030\uff8a\031\103\032" +
    "\076\033\107\034\077\035\101\037\104\040\102\041\110" +
    "\042\105\043\106\044\100\045\uff8a\046\075\050\uff8a\052" +
    "\uff8a\055\uff8a\057\uff8a\001\002\000\060\021\uffa5\022\uffa5" +
    "\023\uffa5\025\uffa5\027\uffa5\030\uffa5\031\103\032\076\033" +
    "\107\034\077\035\101\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5\052\uffa5\055" +
    "\uffa5\057\uffa5\001\002\000\060\021\uff96\022\uff96\023\uff96" +
    "\025\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034" +
    "\uff96\035\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\050\uff96\052\uff96\055\uff96\057" +
    "\uff96\001\002\000\060\021\uff9f\022\uff9f\023\uff9f\025\uff9f" +
    "\027\uff9f\030\uff9f\031\103\032\076\033\107\034\077\035" +
    "\101\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\050\uff9f\052\uff9f\055\uff9f\057\uff9f\001" +
    "\002\000\060\021\uffa8\022\uffa8\023\uffa8\025\uffa8\027\uffa8" +
    "\030\uffa8\031\103\032\076\033\107\034\077\035\101\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\050\uffa8\052\uffa8\055\uffa8\057\uffa8\001\002\000" +
    "\060\021\uffae\022\uffae\023\uffae\025\uffae\027\uffae\030\uffae" +
    "\031\103\032\076\033\107\034\077\035\101\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\050\uffae\052\uffae\055\uffae\057\uffae\001\002\000\060\021" +
    "\uff9c\022\uff9c\023\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\107\034\077\035\101\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c" +
    "\052\uff9c\055\uff9c\057\uff9c\001\002\000\060\021\uffab\022" +
    "\uffab\023\uffab\025\uffab\027\uffab\030\uffab\031\103\032\076" +
    "\033\107\034\077\035\101\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\050\uffab\052\uffab" +
    "\055\uffab\057\uffab\001\002\000\060\021\uff90\022\uff90\023" +
    "\uff90\025\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90" +
    "\034\uff90\035\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\050\uff90\052\uff90\055\uff90" +
    "\057\uff90\001\002\000\060\021\uffa2\022\uffa2\023\uffa2\025" +
    "\uffa2\027\uffa2\030\uffa2\031\103\032\076\033\107\034\077" +
    "\035\101\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\050\uffa2\052\uffa2\055\uffa2\057\uffa2" +
    "\001\002\000\060\021\uff93\022\uff93\023\uff93\025\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\050\uff93\052\uff93\055\uff93\057\uff93\001\002" +
    "\000\060\021\uff99\022\uff99\023\uff99\025\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\033\107\034\077\035\101\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046" +
    "\uff99\050\uff99\052\uff99\055\uff99\057\uff99\001\002\000\060" +
    "\021\uff8d\022\uff8d\023\uff8d\025\uff8d\027\uff8d\030\uff8d\031" +
    "\103\032\076\033\107\034\077\035\101\037\104\040\102" +
    "\041\110\042\105\043\106\044\100\045\uff8d\046\uff8d\050" +
    "\uff8d\052\uff8d\055\uff8d\057\uff8d\001\002\000\060\021\uffb0" +
    "\022\uffb0\023\uffb0\025\uffb0\027\uffb0\030\uffb0\031\103\032" +
    "\076\033\107\034\077\035\101\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\050\uffb0\052" +
    "\uffb0\055\uffb0\057\uffb0\001\002\000\060\021\uff9b\022\uff9b" +
    "\023\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\107\034\077\035\101\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\050\uff9b\052\uff9b\055" +
    "\uff9b\057\uff9b\001\002\000\060\021\uffa4\022\uffa4\023\uffa4" +
    "\025\uffa4\027\uffa4\030\uffa4\031\103\032\076\033\107\034" +
    "\077\035\101\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\050\uffa4\052\uffa4\055\uffa4\057" +
    "\uffa4\001\002\000\060\021\uff95\022\uff95\023\uff95\025\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\050\uff95\052\uff95\055\uff95\057\uff95\001" +
    "\002\000\060\021\uffb1\022\uffb1\023\uffb1\025\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\050\uffb1\052\uffb1\055\uffb1\057\uffb1\001\002\000" +
    "\014\004\uffd3\005\uffd3\011\uffd3\012\uffd3\060\uffd3\001\002" +
    "\000\060\021\uffaa\022\uffaa\023\uffaa\025\uffaa\027\uffaa\030" +
    "\uffaa\031\103\032\076\033\107\034\077\035\101\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\050\uffaa\052\uffaa\055\uffaa\057\uffaa\001\002\000\060" +
    "\021\uffa1\022\uffa1\023\uffa1\025\uffa1\027\uffa1\030\uffa1\031" +
    "\103\032\076\033\107\034\077\035\101\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050" +
    "\uffa1\052\uffa1\055\uffa1\057\uffa1\001\002\000\060\021\uff86" +
    "\022\uff86\023\uff86\025\uff86\027\uff86\030\uff86\031\uff86\032" +
    "\uff86\033\uff86\034\uff86\035\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\050\uff86\052" +
    "\uff86\055\uff86\057\uff86\001\002\000\036\031\103\032\076" +
    "\033\107\034\077\035\101\037\104\040\102\041\110\042" +
    "\105\043\106\044\100\045\111\046\075\057\141\001\002" +
    "\000\060\021\uff87\022\uff87\023\uff87\025\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046" +
    "\uff87\050\uff87\052\uff87\055\uff87\057\uff87\001\002\000\064" +
    "\021\uff85\022\uff85\023\uff85\025\uff85\027\uff85\030\uff85\031" +
    "\uff85\032\uff85\033\uff85\034\uff85\035\uff85\037\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\050" +
    "\uff85\052\uff85\053\143\054\144\055\uff85\057\uff85\001\002" +
    "\000\004\060\147\001\002\000\044\031\056\032\071\033" +
    "\052\034\067\035\053\037\072\040\073\041\055\042\064" +
    "\043\063\044\070\045\057\046\054\047\060\056\062\060" +
    "\061\061\066\001\002\000\036\031\103\032\076\033\107" +
    "\034\077\035\101\037\104\040\102\041\110\042\105\043" +
    "\106\044\100\045\111\046\075\055\146\001\002\000\066" +
    "\021\uff82\022\uff82\023\uff82\025\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82" +
    "\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046" +
    "\uff82\050\uff82\052\uff82\053\uff82\054\uff82\055\uff82\057\uff82" +
    "\001\002\000\066\021\uff83\022\uff83\023\uff83\025\uff83\027" +
    "\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83" +
    "\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\046\uff83\050\uff83\052\uff83\053\uff83\054\uff83" +
    "\055\uff83\057\uff83\001\002\000\060\021\uff88\022\uff88\023" +
    "\uff88\025\uff88\027\uff88\030\uff88\031\103\032\076\033\107" +
    "\034\077\035\101\037\104\040\102\041\110\042\105\043" +
    "\106\044\100\045\uff88\046\uff88\050\uff88\052\uff88\055\uff88" +
    "\057\uff88\001\002\000\060\021\uff8c\022\uff8c\023\uff8c\025" +
    "\uff8c\027\uff8c\030\uff8c\031\103\032\076\033\107\034\077" +
    "\035\101\037\104\040\102\041\110\042\105\043\106\044" +
    "\100\045\uff8c\046\075\050\uff8c\052\uff8c\055\uff8c\057\uff8c" +
    "\001\002\000\060\021\uff9e\022\uff9e\023\uff9e\025\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\033\107\034\077\035\101" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\050\uff9e\052\uff9e\055\uff9e\057\uff9e\001\002" +
    "\000\060\021\uffa7\022\uffa7\023\uffa7\025\uffa7\027\uffa7\030" +
    "\uffa7\031\103\032\076\033\107\034\077\035\101\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\050\uffa7\052\uffa7\055\uffa7\057\uffa7\001\002\000\060" +
    "\021\uff8f\022\uff8f\023\uff8f\025\uff8f\027\uff8f\030\uff8f\031" +
    "\103\032\076\033\107\034\077\035\101\037\104\040\102" +
    "\041\110\042\105\043\106\044\100\045\uff8f\046\uff8f\050" +
    "\uff8f\052\uff8f\055\uff8f\057\uff8f\001\002\000\060\021\uff92" +
    "\022\uff92\023\uff92\025\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\035\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\050\uff92\052" +
    "\uff92\055\uff92\057\uff92\001\002\000\060\021\uff98\022\uff98" +
    "\023\uff98\025\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033" +
    "\uff98\034\uff98\035\uff98\037\uff98\040\uff98\041\uff98\042\uff98" +
    "\043\uff98\044\uff98\045\uff98\046\uff98\050\uff98\052\uff98\055" +
    "\uff98\057\uff98\001\002\000\036\030\160\031\103\032\076" +
    "\033\107\034\077\035\101\037\104\040\102\041\110\042" +
    "\105\043\106\044\100\045\111\046\075\001\002\000\014" +
    "\004\uffd2\005\uffd2\011\uffd2\012\uffd2\060\uffd2\001\002\000" +
    "\010\017\uffec\026\uffec\027\uffec\001\002\000\012\017\uffef" +
    "\026\uffef\027\uffef\060\uffef\001\002\000\012\017\ufff2\026" +
    "\ufff2\027\ufff2\060\037\001\002\000\006\051\165\052\044" +
    "\001\002\000\014\004\023\005\025\011\027\012\024\060" +
    "\032\001\002\000\004\050\167\001\002\000\012\017\ufff0" +
    "\026\ufff0\027\ufff0\060\ufff0\001\002\000\010\017\171\026" +
    "\ufffb\027\ufffb\001\002\000\004\060\272\001\002\000\004" +
    "\050\173\001\002\000\016\014\012\015\ufff9\016\ufff9\017" +
    "\ufff9\026\ufff9\027\ufff9\001\002\000\006\026\200\027\uffe7" +
    "\001\002\000\004\050\176\001\002\000\010\017\uffeb\026" +
    "\uffeb\027\uffeb\001\002\000\004\027\270\001\002\000\022" +
    "\006\201\007\210\010\204\020\206\024\202\027\uffca\050" +
    "\uffca\060\212\001\002\000\006\056\263\060\262\001\002" +
    "\000\044\031\056\032\071\033\052\034\067\035\053\037" +
    "\072\040\073\041\055\042\064\043\063\044\070\045\057" +
    "\046\054\047\060\056\062\060\061\061\066\001\002\000" +
    "\012\022\uffcf\023\uffcf\027\uffcf\050\uffcf\001\002\000\012" +
    "\022\uffc1\023\uffc1\027\uffc1\050\uffc1\001\002\000\012\022" +
    "\uffcb\023\uffcb\027\uffcb\050\uffcb\001\002\000\044\031\056" +
    "\032\071\033\052\034\067\035\053\037\072\040\073\041" +
    "\055\042\064\043\063\044\070\045\057\046\054\047\060" +
    "\056\062\060\061\061\066\001\002\000\012\022\uffd1\023" +
    "\uffd1\027\uffd1\050\uffd1\001\002\000\006\056\253\060\252" +
    "\001\002\000\012\022\uffce\023\uffce\027\uffce\050\uffce\001" +
    "\002\000\022\022\uffb7\023\uffb7\027\uffb7\036\uff81\050\uffb7" +
    "\053\uff81\054\uff81\056\242\001\002\000\004\021\225\001" +
    "\002\000\004\025\222\001\002\000\012\022\uffcc\023\uffcc" +
    "\027\uffcc\050\uffcc\001\002\000\012\022\uffcd\023\uffcd\027" +
    "\uffcd\050\uffcd\001\002\000\006\027\uffe8\050\220\001\002" +
    "\000\026\006\201\007\210\010\204\020\206\022\uffca\023" +
    "\uffca\024\202\027\uffca\050\uffca\060\212\001\002\000\012" +
    "\022\uffd0\023\uffd0\027\uffd0\050\uffd0\001\002\000\022\006" +
    "\201\007\210\010\204\020\206\024\202\027\uffca\050\uffca" +
    "\060\212\001\002\000\006\027\224\050\220\001\002\000" +
    "\012\022\uffc0\023\uffc0\027\uffc0\050\uffc0\001\002\000\026" +
    "\006\201\007\210\010\204\020\206\022\uffca\023\uffca\024" +
    "\202\027\uffca\050\uffca\060\212\001\002\000\012\022\uffbb" +
    "\023\uffbb\027\uffbb\050\220\001\002\000\010\022\231\023" +
    "\230\027\uffba\001\002\000\022\006\201\007\210\010\204" +
    "\020\206\024\202\027\uffca\050\uffca\060\212\001\002\000" +
    "\044\031\056\032\071\033\052\034\067\035\053\037\072" +
    "\040\073\041\055\042\064\043\063\044\070\045\057\046" +
    "\054\047\060\056\062\060\061\061\066\001\002\000\004" +
    "\027\233\001\002\000\012\022\uffbe\023\uffbe\027\uffbe\050" +
    "\uffbe\001\002\000\036\021\235\031\103\032\076\033\107" +
    "\034\077\035\101\037\104\040\102\041\110\042\105\043" +
    "\106\044\100\045\111\046\075\001\002\000\026\006\201" +
    "\007\210\010\204\020\206\022\uffca\023\uffca\024\202\027" +
    "\uffca\050\uffca\060\212\001\002\000\012\022\uffbc\023\uffbc" +
    "\027\uffbc\050\220\001\002\000\006\027\uffb9\050\220\001" +
    "\002\000\010\036\250\053\143\054\144\001\002\000\012" +
    "\022\uffb8\023\uffb8\027\uffb8\050\uffb8\001\002\000\050\031" +
    "\056\032\071\033\052\034\067\035\053\037\072\040\073" +
    "\041\055\042\064\043\063\044\070\045\057\046\054\047" +
    "\060\052\uffb3\056\062\057\uffb3\060\061\061\066\001\002" +
    "\000\040\031\103\032\076\033\107\034\077\035\101\037" +
    "\104\040\102\041\110\042\105\043\106\044\100\045\111" +
    "\046\075\052\uffb4\057\uffb4\001\002\000\006\052\245\057" +
    "\246\001\002\000\044\031\056\032\071\033\052\034\067" +
    "\035\053\037\072\040\073\041\055\042\064\043\063\044" +
    "\070\045\057\046\054\047\060\056\062\060\061\061\066" +
    "\001\002\000\012\022\uffb6\023\uffb6\027\uffb6\050\uffb6\001" +
    "\002\000\040\031\103\032\076\033\107\034\077\035\101" +
    "\037\104\040\102\041\110\042\105\043\106\044\100\045" +
    "\111\046\075\052\uffb5\057\uffb5\001\002\000\044\031\056" +
    "\032\071\033\052\034\067\035\053\037\072\040\073\041" +
    "\055\042\064\043\063\044\070\045\057\046\054\047\060" +
    "\056\062\060\061\061\066\001\002\000\044\022\uffb2\023" +
    "\uffb2\027\uffb2\031\103\032\076\033\107\034\077\035\101" +
    "\037\104\040\102\041\110\042\105\043\106\044\100\045" +
    "\111\046\075\050\uffb2\001\002\000\004\057\257\001\002" +
    "\000\006\057\254\060\255\001\002\000\012\022\uffc4\023" +
    "\uffc4\027\uffc4\050\uffc4\001\002\000\014\022\uffc3\023\uffc3" +
    "\027\uffc3\050\uffc3\057\256\001\002\000\012\022\uffc2\023" +
    "\uffc2\027\uffc2\050\uffc2\001\002\000\012\022\uffc6\023\uffc6" +
    "\027\uffc6\050\uffc6\001\002\000\036\021\uffbd\031\103\032" +
    "\076\033\107\034\077\035\101\037\104\040\102\041\110" +
    "\042\105\043\106\044\100\045\111\046\075\001\002\000" +
    "\036\025\uffbf\031\103\032\076\033\107\034\077\035\101" +
    "\037\104\040\102\041\110\042\105\043\106\044\100\045" +
    "\111\046\075\001\002\000\004\057\267\001\002\000\006" +
    "\057\264\060\265\001\002\000\012\022\uffc5\023\uffc5\027" +
    "\uffc5\050\uffc5\001\002\000\014\022\uffc7\023\uffc7\027\uffc7" +
    "\050\uffc7\057\266\001\002\000\012\022\uffc9\023\uffc9\027" +
    "\uffc9\050\uffc9\001\002\000\012\022\uffc8\023\uffc8\027\uffc8" +
    "\050\uffc8\001\002\000\004\060\271\001\002\000\004\050" +
    "\uffe9\001\002\000\006\050\uffe6\056\274\001\002\000\004" +
    "\050\uffea\001\002\000\010\016\275\057\276\060\uffe0\001" +
    "\002\000\004\060\uffe1\001\002\000\004\050\uffe5\001\002" +
    "\000\006\050\305\057\304\001\002\000\004\060\037\001" +
    "\002\000\006\051\302\052\044\001\002\000\014\004\023" +
    "\005\025\011\027\012\024\060\032\001\002\000\006\050" +
    "\uffe2\057\uffe2\001\002\000\004\050\uffe4\001\002\000\006" +
    "\016\275\060\uffe0\001\002\000\004\060\037\001\002\000" +
    "\006\051\310\052\044\001\002\000\014\004\023\005\025" +
    "\011\027\012\024\060\032\001\002\000\006\050\uffe3\057" +
    "\uffe3\001\002\000\004\027\315\001\002\000\022\006\201" +
    "\007\210\010\204\020\206\024\202\027\uffca\050\uffca\060" +
    "\212\001\002\000\006\027\ufffd\050\220\001\002\000\004" +
    "\060\316\001\002\000\004\053\317\001\002\000\004\002" +
    "\uffff\001\002\000\016\015\ufffa\016\ufffa\017\ufffa\026\ufffa" +
    "\027\ufffa\060\321\001\002\000\004\037\322\001\002\000" +
    "\044\031\056\032\071\033\052\034\067\035\053\037\072" +
    "\040\073\041\055\042\064\043\063\044\070\045\057\046" +
    "\054\047\060\056\062\060\061\061\066\001\002\000\036" +
    "\031\103\032\076\033\107\034\077\035\101\037\104\040" +
    "\102\041\110\042\105\043\106\044\100\045\111\046\075" +
    "\050\324\001\002\000\016\015\ufff8\016\ufff8\017\ufff8\026" +
    "\ufff8\027\ufff8\060\ufff8\001\002\000\004\050\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\010\002\006\003\003\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\012\013\013\001" +
    "\001\000\004\016\317\001\001\000\004\005\311\001\001" +
    "\000\004\014\014\001\001\000\004\015\160\001\001\000" +
    "\004\017\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\025\040\030\042\032\043\027\044\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\156" +
    "\001\001\000\002\001\001\000\006\043\027\044\047\001" +
    "\001\000\010\023\034\024\037\041\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\042\041" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\025\040\045\042\032\043\027\044" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\064\001\001\000\004\046\155\001" +
    "\001\000\004\046\154\001\001\000\004\046\153\001\001" +
    "\000\004\046\152\001\001\000\004\046\151\001\001\000" +
    "\004\046\150\001\001\000\004\046\147\001\001\000\004" +
    "\045\141\001\001\000\004\046\137\001\001\000\004\046" +
    "\135\001\001\000\004\046\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\131\001\001\000\004\046" +
    "\130\001\001\000\004\046\127\001\001\000\004\046\126" +
    "\001\001\000\004\046\073\001\001\000\002\001\001\000" +
    "\004\046\125\001\001\000\004\046\124\001\001\000\004" +
    "\046\123\001\001\000\004\046\122\001\001\000\004\046" +
    "\121\001\001\000\004\046\120\001\001\000\004\046\117" +
    "\001\001\000\004\046\116\001\001\000\004\046\115\001" +
    "\001\000\004\046\114\001\001\000\004\046\113\001\001" +
    "\000\004\046\112\001\001\000\004\046\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\167\001\001\000\004\020\162\001\001" +
    "\000\004\041\163\001\001\000\002\001\001\000\014\021" +
    "\025\040\165\042\032\043\027\044\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\173\012\174" +
    "\013\013\001\001\000\004\010\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\022\204" +
    "\025\216\026\206\027\214\030\213\031\215\032\212\035" +
    "\210\036\202\001\001\000\002\001\001\000\004\046\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\237\051\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\022\204\026" +
    "\220\027\214\030\213\031\215\032\212\035\210\036\202" +
    "\001\001\000\002\001\001\000\024\022\204\025\222\026" +
    "\206\027\214\030\213\031\215\032\212\035\210\036\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\022" +
    "\204\025\225\026\206\027\214\030\213\031\215\032\212" +
    "\035\210\036\202\001\001\000\004\033\226\001\001\000" +
    "\004\034\231\001\001\000\024\022\204\025\236\026\206" +
    "\027\214\030\213\031\215\032\212\035\210\036\202\001" +
    "\001\000\004\046\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\022\204\025\235\026" +
    "\206\027\214\030\213\031\215\032\212\035\210\036\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\242\050\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\272\001\001\000\002" +
    "\001\001\000\006\037\277\052\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\300" +
    "\001\001\000\002\001\001\000\014\021\025\040\302\042" +
    "\032\043\027\044\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\305\001\001\000\004\041\306\001" +
    "\001\000\002\001\001\000\014\021\025\040\310\042\032" +
    "\043\027\044\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\022\204\025\313\026\206\027\214\030\213" +
    "\031\215\032\212\035\210\036\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	countIW=0;
	System.out.println("init");	
	sampleModule=null;
	proc=null;
	oneWstmt=null;
	oneIfstmt=null;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	public int countIW;
	public Boolean countIF[]=new Boolean[100];
	public flowchart.Module sampleModule;
	public Procedure proc;
	public WhileStatement wstmt[]=new WhileStatement[100];
	public WhileStatement oneWstmt;
	public IfStatement ifstmt[] =new IfStatement[100];
	public IfStatement oneIfstmt;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // selector ::= 
            {
              String RESULT =null;
		
			RESULT=" ";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // selector ::= selector LBRACKET expression RBRACKET 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT=s+"["+e+"]";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // selector ::= selector PERIOD IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			RESULT=s+"."+id;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=n;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= IDENTIFIER selector 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=id+s;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= LPAREN RPAREN 
            {
              String RESULT =null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= LPAREN expression RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT="("+e+")";	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= NOT expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT="~"+e;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= NOT 
            {
              String RESULT =null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= expression OR expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+" OR "+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression OR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= OR expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expression AND expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+" AND "+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression AND 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= AND expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= expression MOD expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+" MOD "+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= expression MOD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= MOD expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= expression DIVIDE expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+" DIV "+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= expression DIVIDE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= DIVIDE expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= expression TIMES expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+"*"+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= expression TIMES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= TIMES expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= expression MINUS expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+"-"+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= expression MINUS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= MINUS expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= expression PLUS expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+"+"+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= expression PLUS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= PLUS expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= expression GT expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+">"+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= expression GT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= GT expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= expression GE expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+">="+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= expression GE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= GE expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression LT expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+"<"+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expression LT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= LT expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression LE expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+"<="+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression LE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= LE expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression NEQ expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+"#"+e2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression NEQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= NEQ expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression EQ expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e1+"="+e2;
			System.out.println(RESULT);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression EQ 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= EQ expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= NUMBER NUMBER 
            {
              String RESULT =null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=id+s+":="+e;
			
			if(parser.countIW==0)
				parser.proc.add(new PrimitiveStatement(id+s+":="+e));
			else if(parser.countIF[parser.countIW]){
				parser.wstmt[parser.countIW].getLoopBody().add(new PrimitiveStatement(id+s+":="+e));
			}
			else{
				parser.ifstmt[parser.countIW].getTrueBody().add(new PrimitiveStatement(id+s+":="+e));
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ap_list ::= 
            {
              String RESULT =null;
		
			RESULT=" ";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ap_list ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=e;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ap_list ::= ap_list COMMA expression 
            {
              String RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=ap+","+e;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // actual_parameters ::= LPAREN ap_list RPAREN 
            {
              String RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT="("+ap+")";	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // actual_parameters ::= 
            {
              String RESULT =null;
			RESULT=" ";	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT=id+ap;	
			
			if(parser.countIW==0)
				parser.proc.add(new PrimitiveStatement(RESULT));
			else if(parser.countIF[parser.countIW]){
				parser.wstmt[parser.countIW].getLoopBody().add(new PrimitiveStatement(RESULT));
			}else{
				parser.ifstmt[parser.countIW].getTrueBody().add(new PrimitiveStatement(RESULT));
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else_statement ::= ELSE statement_sequence 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elsif_statement ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elsif_statement ::= elsif_statement ELSIF expression THEN statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_begin ::= IF expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.countIW++;
			parser.countIF[parser.countIW]=false;
			parser.oneIfstmt=new IfStatement(e);
			parser.ifstmt[parser.countIW]=parser.oneIfstmt;


			if(parser.countIW-1==0)
				parser.proc.add(parser.ifstmt[parser.countIW]);
			else if(parser.countIF[parser.countIW-1]){
				parser.wstmt[parser.countIW-1].getLoopBody().add(parser.ifstmt[parser.countIW]);
			}else{
				parser.ifstmt[parser.countIW-1].getTrueBody().add(parser.ifstmt[parser.countIW]	);
			}
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_begin",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_statement ::= if_begin THEN statement_sequence elsif_statement else_statement END 
            {
              Object RESULT =null;
		
				System.out.println("if");
				parser.countIW--;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // while_begin ::= WHILE expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.countIW++;
			parser.countIF[parser.countIW]=true;
			parser.oneWstmt=new WhileStatement(e);
			parser.wstmt[parser.countIW]=parser.oneWstmt;
			
			
			if(parser.countIW-1==0)
				parser.proc.add(parser.wstmt[parser.countIW]);
			else if(parser.countIF[parser.countIW-1]){
				parser.wstmt[parser.countIW-1].getLoopBody().add(parser.wstmt[parser.countIW]);
			}else{
				parser.ifstmt[parser.countIW-1].getTrueBody().add(parser.wstmt[parser.countIW]);
			}
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_begin",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // while_statement ::= while_begin DO statement_sequence END 
            {
              Object RESULT =null;
		
				System.out.println("while");
				parser.countIW--;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rw_statement ::= WRITELN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rw_statement ::= WRITE LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rw_statement ::= WRITE LPAREN IDENTIFIER 
            {
              Object RESULT =null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rw_statement ::= WRITE LPAREN RPAREN 
            {
              Object RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rw_statement ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rw_statement ::= WRITE IDENTIFIER RPAREN 
            {
              Object RESULT =null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rw_statement ::= READ LPAREN IDENTIFIER 
            {
              Object RESULT =null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rw_statement ::= READ IDENTIFIER RPAREN 
            {
              Object RESULT =null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rw_statement ::= READ LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= rw_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= procedure_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_sequence ::= statement_sequence SEMI statement 
            {
              Object RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_sequence ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // array_part ::= ARRAY expression OF 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_part ::= array_part ARRAY expression OF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array_type ::= array_part type_but_array 
            {
              String RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_one ::= identifier_list COLON type_id 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_one ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_list ::= field_one 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_list ::= field_list SEMI field_one 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // record_type ::= RECORD field_list END 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_but_array ::= record_type 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_but_array",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_but_array ::= BOOLEAN 
            {
              String RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_but_array",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_but_array ::= INTEGER 
            {
              String RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_but_array",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_but_array ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_but_array",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_id ::= array_type 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_id ::= type_but_array 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_if ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_if ::= VAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fp_section ::= var_if identifier_list COLON type_id 
            {
              String RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id_list = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fp_section ::= fp_section SEMI var_if identifier_list COLON type_id 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id_list = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formal_parameters ::= LPAREN fp_section RPAREN 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal_parameters ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_parameters ::= 
            {
              String RESULT =null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure_begin ::= 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure_begin ::= BEGIN statement_sequence 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedure_body ::= declarations procedure_begin END IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				parser.proc=parser.sampleModule.add(id);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_declaration ::= procedure_declaration procedure_heading SEMI procedure_body SEMI 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_declaration ::= 
            {
              String RESULT =null;
		
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              String RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id_list = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identifier_list ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_list ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_list ::= var_list identifier_list COLON type_id SEMI 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id_list = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_declare ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_declare ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_list ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_list ::= type_list IDENTIFIER EQ type_id SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declare ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_list ::= const_list IDENTIFIER EQ expression SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_declare ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_declare ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= const_declare type_declare var_declare procedure_declaration 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // module_content ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module_content ::= BEGIN statement_sequence 
            {
              String RESULT =null;
		
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module_begin ::= MODULE IDENTIFIER 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.sampleModule=new flowchart.Module(id1);
			System.out.println("Begin");			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_begin",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module_block ::= module_begin SEMI declarations module_content END IDENTIFIER PERIOD 
            {
              String RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program_code EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program_code ::= module_block 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("success");
			parser.sampleModule.show();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_code",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

