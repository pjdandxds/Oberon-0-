/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;
import java.io.*;
import exceptions.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>D:/Fundamentals of Compiling/20162180043彭家栋/实验三/ex2/src/Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\11\1\5\1\4\1\7\1\0\1\4\1\6\16\11\4\0\1\4"+
    "\2\0\1\26\1\10\1\0\1\32\1\0\1\1\1\3\1\2\1\15"+
    "\1\35\1\16\1\36\1\0\1\12\7\14\2\13\1\24\1\34\1\27"+
    "\1\25\1\30\2\0\1\56\1\51\1\53\1\17\1\44\1\41\1\52"+
    "\1\43\1\20\2\10\1\46\1\22\1\45\1\23\1\55\1\10\1\31"+
    "\1\47\1\42\1\54\1\21\1\50\1\10\1\57\1\10\1\37\1\0"+
    "\1\40\1\0\1\10\1\0\4\10\1\64\3\10\1\62\2\10\1\65"+
    "\1\10\1\66\3\10\1\61\1\10\1\63\2\10\1\60\3\10\3\0"+
    "\1\33\41\11\2\0\4\10\4\0\1\10\2\0\1\11\7\0\1\10"+
    "\4\0\1\10\5\0\27\10\1\0\37\10\1\0\u01ca\10\4\0\14\10"+
    "\16\0\5\10\7\0\1\10\1\0\1\10\21\0\160\11\5\10\1\0"+
    "\2\10\2\0\4\10\1\0\1\10\6\0\1\10\1\0\3\10\1\0"+
    "\1\10\1\0\24\10\1\0\123\10\1\0\213\10\1\0\5\11\2\0"+
    "\246\10\1\0\46\10\2\0\1\10\7\0\47\10\7\0\1\10\1\0"+
    "\55\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\1\11\10\0"+
    "\33\10\5\0\3\10\15\0\6\11\5\0\1\10\4\0\13\11\1\0"+
    "\1\11\3\0\53\10\37\11\4\0\2\10\1\11\143\10\1\0\1\10"+
    "\10\11\1\0\6\11\2\10\2\11\1\0\4\11\2\10\12\11\3\10"+
    "\2\0\1\10\17\0\1\11\1\10\1\11\36\10\33\11\2\0\131\10"+
    "\13\11\1\10\16\0\12\11\41\10\11\11\2\10\4\0\1\10\5\0"+
    "\26\10\4\11\1\10\11\11\1\10\3\11\1\10\5\11\22\0\31\10"+
    "\3\11\4\0\13\10\65\0\25\10\1\0\10\10\26\0\60\11\66\10"+
    "\3\11\1\10\22\11\1\10\7\11\12\10\2\11\2\0\12\11\1\0"+
    "\20\10\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\1\10\3\0\4\10\2\0\1\11\1\10\7\11\2\0\2\11"+
    "\2\0\3\11\1\10\10\0\1\11\4\0\2\10\1\0\3\10\2\11"+
    "\2\0\12\11\4\10\7\0\2\10\4\0\3\11\1\0\6\10\4\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0"+
    "\2\10\2\0\1\11\1\0\5\11\4\0\2\11\2\0\3\11\3\0"+
    "\1\11\7\0\4\10\1\0\1\10\7\0\14\11\3\10\1\11\13\0"+
    "\3\11\1\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\2\0\1\11\1\10\10\11\1\0\3\11\1\0"+
    "\3\11\2\0\1\10\17\0\2\10\2\11\2\0\12\11\1\0\1\10"+
    "\7\0\1\10\6\11\1\0\3\11\1\0\10\10\2\0\2\10\2\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10"+
    "\7\11\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\10\1\0"+
    "\3\10\2\11\2\0\12\11\1\0\1\10\20\0\1\11\1\10\1\0"+
    "\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0"+
    "\2\10\3\0\2\10\3\0\3\10\3\0\14\10\4\0\5\11\3\0"+
    "\3\11\1\0\4\11\2\0\1\10\6\0\1\11\16\0\12\11\11\0"+
    "\1\10\6\0\4\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0"+
    "\20\10\3\0\1\10\7\11\1\0\3\11\1\0\4\11\7\0\2\11"+
    "\1\0\3\10\5\0\2\10\2\11\2\0\12\11\20\0\1\10\3\11"+
    "\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\2\0\1\11\1\10\7\11\1\0\3\11\1\0\4\11\7\0\2\11"+
    "\7\0\1\10\1\0\2\10\2\11\2\0\12\11\1\0\2\10\15\0"+
    "\4\11\1\0\10\10\1\0\3\10\1\0\51\10\2\11\1\10\7\11"+
    "\1\0\3\11\1\0\4\11\1\10\5\0\3\10\1\11\7\0\3\10"+
    "\2\11\2\0\12\11\12\0\6\10\2\0\2\11\1\0\22\10\3\0"+
    "\30\10\1\0\11\10\1\0\1\10\2\0\7\10\3\0\1\11\4\0"+
    "\6\11\1\0\1\11\1\0\10\11\6\0\12\11\2\0\2\11\15\0"+
    "\60\10\1\11\2\10\7\11\4\0\10\10\10\11\1\0\12\11\47\0"+
    "\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0"+
    "\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0"+
    "\2\10\1\0\4\10\1\11\2\10\6\11\1\0\2\11\1\10\2\0"+
    "\5\10\1\0\1\10\1\0\6\11\2\0\12\11\2\0\4\10\40\0"+
    "\1\10\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11\1\0"+
    "\1\11\4\0\2\11\10\10\1\0\44\10\4\0\24\11\1\0\2\11"+
    "\5\10\13\11\1\0\44\11\11\0\1\11\71\0\53\10\24\11\1\10"+
    "\12\11\6\0\6\10\4\11\4\10\3\11\1\10\3\11\2\10\7\11"+
    "\3\10\4\11\15\10\14\11\1\10\17\11\2\0\46\10\1\0\1\10"+
    "\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10"+
    "\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10"+
    "\1\0\71\10\1\0\4\10\2\0\103\10\2\0\3\11\40\0\20\10"+
    "\20\0\126\10\2\0\6\10\3\0\u026c\10\2\0\21\10\1\0\32\10"+
    "\5\0\113\10\3\0\13\10\7\0\15\10\1\0\4\10\3\11\13\0"+
    "\22\10\3\11\13\0\22\10\2\11\14\0\15\10\1\0\3\10\1\0"+
    "\2\11\14\0\64\10\40\11\3\0\1\10\3\0\2\10\1\11\2\0"+
    "\12\11\41\0\4\11\1\0\12\11\6\0\130\10\10\0\5\10\2\11"+
    "\42\10\1\11\1\10\5\0\106\10\12\0\37\10\1\0\14\11\4\0"+
    "\14\11\12\0\12\11\36\10\2\0\5\10\13\0\54\10\4\0\32\10"+
    "\6\0\12\11\46\0\27\10\5\11\4\0\65\10\12\11\1\0\35\11"+
    "\2\0\13\11\6\0\12\11\15\0\1\10\10\0\16\11\102\0\5\11"+
    "\57\10\21\11\7\10\4\0\12\11\21\0\11\11\14\0\3\11\36\10"+
    "\15\11\2\10\12\11\54\10\16\11\14\0\44\10\24\11\10\0\12\11"+
    "\3\0\3\10\12\11\44\10\2\0\11\10\107\0\3\11\1\0\25\11"+
    "\4\10\1\11\4\10\3\11\2\10\3\11\6\0\300\10\72\11\1\0"+
    "\5\11\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0\65\10"+
    "\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10"+
    "\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10\16\0\5\11"+
    "\32\0\5\11\20\0\2\10\23\0\1\10\13\0\5\11\1\0\12\11"+
    "\1\0\1\10\15\0\1\10\20\0\15\10\3\0\40\10\20\0\15\11"+
    "\4\0\1\11\3\0\14\11\21\0\1\10\4\0\1\10\2\0\12\10"+
    "\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0\1\10"+
    "\21\0\51\10\u0a77\0\57\10\1\0\57\10\1\0\205\10\6\0\4\10"+
    "\3\11\2\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10"+
    "\7\0\1\10\17\0\1\11\27\10\11\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\40\11\57\0\1\10\u01d5\0\3\10\31\0\11\10\6\11"+
    "\1\0\5\10\2\0\5\10\4\0\126\10\2\0\2\11\2\0\3\10"+
    "\1\0\132\10\1\0\4\10\5\0\52\10\2\0\136\10\21\0\33\10"+
    "\65\0\20\10\u0200\0\u19b6\10\112\0\u51eb\10\25\0\u048d\10\103\0\56\10"+
    "\2\0\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10\1\11\4\0"+
    "\12\11\1\0\37\10\2\11\120\10\2\11\45\0\11\10\2\0\147\10"+
    "\2\0\44\10\1\0\10\10\77\0\13\10\1\11\3\10\1\11\4\10"+
    "\1\11\27\10\5\11\20\0\1\10\7\0\64\10\14\0\2\11\62\10"+
    "\22\11\12\0\12\11\6\0\22\11\6\10\3\0\1\10\1\0\1\10"+
    "\2\0\12\11\34\10\10\11\2\0\27\10\15\11\14\0\35\10\3\0"+
    "\4\11\57\10\16\11\16\0\1\10\12\11\6\0\5\10\1\11\12\10"+
    "\12\11\5\10\1\0\51\10\16\11\11\0\3\10\1\11\10\10\2\11"+
    "\2\0\12\11\6\0\27\10\3\0\1\10\3\11\62\10\1\11\1\10"+
    "\3\11\2\10\2\11\5\10\2\11\1\10\1\11\1\10\30\0\3\10"+
    "\2\0\13\10\5\11\2\0\3\10\2\11\12\0\6\10\2\0\6\10"+
    "\2\0\6\10\11\0\7\10\1\0\7\10\1\0\53\10\1\0\12\10"+
    "\12\0\163\10\10\11\1\0\2\11\2\0\12\11\6\0\u2ba4\10\14\0"+
    "\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10\14\0"+
    "\5\10\5\0\1\10\1\11\12\10\1\0\15\10\1\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0"+
    "\100\10\2\0\66\10\50\0\15\10\3\0\20\11\20\0\20\11\3\0"+
    "\2\10\30\0\3\10\31\0\1\10\6\0\5\10\1\0\207\10\2\0"+
    "\1\11\4\0\1\10\13\0\12\11\7\0\32\10\4\0\1\10\1\0"+
    "\32\10\13\0\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0"+
    "\3\10\3\0\2\10\3\0\2\10\22\0\3\11\4\0\14\10\1\0"+
    "\32\10\1\0\23\10\1\0\2\10\1\0\17\10\2\0\16\10\42\0"+
    "\173\10\105\0\65\10\210\0\1\11\202\0\35\10\3\0\61\10\17\0"+
    "\1\11\37\0\40\10\15\0\36\10\5\0\46\10\5\11\5\0\36\10"+
    "\2\0\44\10\4\0\10\10\1\0\5\10\52\0\236\10\2\0\12\11"+
    "\6\0\44\10\4\0\44\10\4\0\50\10\10\0\64\10\234\0\u0137\10"+
    "\11\0\26\10\12\0\10\10\230\0\6\10\2\0\1\10\1\0\54\10"+
    "\1\0\2\10\3\0\1\10\2\0\27\10\12\0\27\10\11\0\37\10"+
    "\101\0\23\10\1\0\2\10\12\0\26\10\12\0\32\10\106\0\70\10"+
    "\6\0\2\10\100\0\1\10\3\11\1\0\2\11\5\0\4\11\4\10"+
    "\1\0\3\10\1\0\33\10\4\0\3\11\4\0\1\11\40\0\35\10"+
    "\3\0\35\10\43\0\10\10\1\0\34\10\2\11\31\0\66\10\12\0"+
    "\26\10\12\0\23\10\15\0\22\10\156\0\111\10\67\0\63\10\15\0"+
    "\63\10\u030d\0\3\11\65\10\17\11\37\0\12\11\17\0\4\11\55\10"+
    "\13\11\2\0\1\11\22\0\31\10\7\0\12\11\6\0\3\11\44\10"+
    "\16\11\1\0\12\11\20\0\43\10\1\11\2\0\1\10\11\0\3\11"+
    "\60\10\16\11\4\10\5\0\3\11\3\0\12\11\1\10\1\0\1\10"+
    "\43\0\22\10\1\0\31\10\14\11\6\0\1\11\101\0\7\10\1\0"+
    "\1\10\1\0\4\10\1\0\17\10\1\0\12\10\7\0\57\10\14\11"+
    "\5\0\12\11\6\0\4\11\1\0\10\10\2\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10\7\11"+
    "\2\0\2\11\2\0\3\11\2\0\1\10\6\0\1\11\5\0\5\10"+
    "\2\11\2\0\7\11\3\0\5\11\213\0\65\10\22\11\4\10\5\0"+
    "\12\11\46\0\60\10\24\11\2\10\1\0\1\10\10\0\12\11\246\0"+
    "\57\10\7\11\2\0\11\11\27\0\4\10\2\11\42\0\60\10\21\11"+
    "\3\0\1\10\13\0\12\11\46\0\53\10\15\11\10\0\12\11\66\0"+
    "\32\10\3\0\17\11\4\0\12\11\u0166\0\100\10\12\11\25\0\1\10"+
    "\u0100\0\1\10\12\11\50\10\7\11\1\10\4\11\10\0\1\11\10\0"+
    "\1\10\13\11\50\10\2\0\4\10\20\11\46\0\71\10\u0107\0\11\10"+
    "\1\0\45\10\10\11\1\0\10\11\1\10\17\0\12\11\30\0\36\10"+
    "\2\0\26\11\1\0\16\11\111\0\7\10\1\0\2\10\1\0\46\10"+
    "\6\11\3\0\1\11\1\0\2\11\1\0\7\11\1\10\1\11\10\0"+
    "\12\11\u02a6\0\u039a\10\146\0\157\10\21\0\304\10\u0abc\0\u042f\10\u0fd1\0"+
    "\u0247\10\u21b9\0\u0239\10\7\0\37\10\1\0\12\11\146\0\36\10\2\0"+
    "\5\11\13\0\60\10\7\11\11\0\4\10\14\0\12\11\11\0\25\10"+
    "\5\0\23\10\u0370\0\105\10\13\0\1\10\56\11\20\0\4\11\15\10"+
    "\100\0\2\10\36\0\u17ed\10\23\0\u02f3\10\u250d\0\u011f\10\121\0\u018c\10"+
    "\u0904\0\153\10\5\0\15\10\3\0\11\10\7\0\12\10\3\0\2\11"+
    "\1\0\4\11\u14c1\0\5\11\3\0\26\11\2\0\7\11\36\0\4\11"+
    "\224\0\3\11\u01bb\0\125\10\1\0\107\10\1\0\2\10\2\0\1\10"+
    "\2\0\2\10\2\0\4\10\1\0\14\10\1\0\1\10\1\0\7\10"+
    "\1\0\101\10\1\0\4\10\2\0\10\10\1\0\7\10\1\0\34\10"+
    "\1\0\4\10\1\0\5\10\1\0\1\10\3\0\7\10\1\0\u0154\10"+
    "\2\0\31\10\1\0\31\10\1\0\37\10\1\0\31\10\1\0\37\10"+
    "\1\0\31\10\1\0\37\10\1\0\31\10\1\0\37\10\1\0\31\10"+
    "\1\0\10\10\2\0\62\11\u0200\0\67\11\4\0\62\11\10\0\1\11"+
    "\16\0\1\11\26\0\5\11\1\0\17\11\u0550\0\7\11\1\0\21\11"+
    "\2\0\7\11\1\0\2\11\1\0\5\11\u07d5\0\305\10\13\0\7\11"+
    "\51\0\104\10\7\11\5\0\12\11\u04a6\0\4\10\1\0\33\10\1\0"+
    "\2\10\1\0\1\10\2\0\1\10\1\0\12\10\1\0\4\10\1\0"+
    "\1\10\1\0\1\10\6\0\1\10\4\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10\1\0"+
    "\1\10\2\0\4\10\1\0\7\10\1\0\4\10\1\0\4\10\1\0"+
    "\1\10\1\0\12\10\1\0\21\10\5\0\3\10\1\0\5\10\1\0"+
    "\21\10\u1144\0\ua6d7\10\51\0\u1035\10\13\0\336\10\2\0\u1682\10\16\0"+
    "\u1d31\10\u0c1f\0\u021e\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\11\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\2\7"+
    "\1\10\1\11\5\6\1\12\1\13\1\14\1\15\1\16"+
    "\1\6\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\10\6\1\0\1\6\1\26\1\27\3\6\1\30\1\31"+
    "\1\32\1\33\1\34\15\6\1\0\1\35\1\6\1\36"+
    "\1\37\4\6\1\40\14\6\1\41\1\42\1\43\1\6"+
    "\1\44\13\6\1\45\1\46\1\47\1\6\1\50\1\51"+
    "\1\6\1\52\2\6\1\53\1\54\3\6\1\55\1\56"+
    "\1\6\1\57\1\6\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\67\0\67\0\245\0\334"+
    "\0\u0113\0\u014a\0\67\0\67\0\u0181\0\u01b8\0\u01ef\0\u0226"+
    "\0\u025d\0\u0294\0\67\0\67\0\u02cb\0\u0302\0\u0339\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\u0370\0\u03a7"+
    "\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f"+
    "\0\334\0\334\0\u0596\0\u05cd\0\u0604\0\334\0\334\0\67"+
    "\0\67\0\67\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906"+
    "\0\334\0\u093d\0\334\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\334\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\334\0\334\0\334"+
    "\0\u0d1b\0\334\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\334\0\334\0\334"+
    "\0\u0faf\0\334\0\334\0\u0fe6\0\334\0\u101d\0\u1054\0\334"+
    "\0\334\0\u108b\0\u10c2\0\u10f9\0\334\0\334\0\u1130\0\334"+
    "\0\u1167\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\6\1\10"+
    "\1\2\1\11\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\10"+
    "\1\37\1\10\1\40\3\10\1\41\1\42\1\10\1\43"+
    "\1\10\1\44\1\45\1\10\1\46\6\10\71\0\1\47"+
    "\73\0\1\6\64\0\1\10\2\0\5\10\2\0\5\10"+
    "\5\0\1\10\7\0\26\10\12\0\1\11\1\0\1\11"+
    "\64\0\3\12\57\0\1\10\2\0\5\10\2\0\1\10"+
    "\1\50\2\10\1\51\5\0\1\10\7\0\26\10\5\0"+
    "\1\10\2\0\5\10\2\0\5\10\5\0\1\10\7\0"+
    "\1\52\3\10\1\53\21\10\5\0\1\10\2\0\5\10"+
    "\2\0\5\10\5\0\1\10\7\0\15\10\1\54\10\10"+
    "\5\0\1\10\2\0\5\10\2\0\4\10\1\55\5\0"+
    "\1\10\7\0\26\10\5\0\1\10\2\0\5\10\2\0"+
    "\5\10\5\0\1\56\7\0\1\57\25\10\25\0\1\60"+
    "\66\0\1\61\66\0\1\62\46\0\1\10\2\0\5\10"+
    "\2\0\5\10\5\0\1\10\7\0\3\10\1\63\22\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\10"+
    "\7\0\2\10\1\64\13\10\1\65\7\10\5\0\1\10"+
    "\2\0\5\10\2\0\5\10\5\0\1\10\7\0\4\10"+
    "\1\66\1\67\20\10\5\0\1\10\2\0\5\10\2\0"+
    "\5\10\5\0\1\70\7\0\2\10\1\71\23\10\5\0"+
    "\1\10\2\0\5\10\2\0\4\10\1\72\5\0\1\10"+
    "\7\0\3\10\1\73\22\10\5\0\1\10\2\0\5\10"+
    "\2\0\4\10\1\74\5\0\1\10\7\0\26\10\5\0"+
    "\1\10\2\0\5\10\2\0\5\10\5\0\1\75\7\0"+
    "\26\10\5\0\1\10\2\0\5\10\2\0\5\10\5\0"+
    "\1\76\7\0\26\10\5\0\1\10\2\0\5\10\2\0"+
    "\5\10\5\0\1\10\7\0\20\10\1\77\5\10\2\47"+
    "\1\100\64\47\5\0\1\10\2\0\5\10\2\0\2\10"+
    "\1\101\2\10\5\0\1\10\7\0\26\10\5\0\1\10"+
    "\2\0\5\10\2\0\5\10\5\0\1\10\7\0\1\10"+
    "\1\102\24\10\5\0\1\10\2\0\5\10\2\0\5\10"+
    "\5\0\1\103\7\0\26\10\5\0\1\10\2\0\5\10"+
    "\2\0\1\104\4\10\5\0\1\10\7\0\26\10\5\0"+
    "\1\10\2\0\5\10\2\0\5\10\5\0\1\10\7\0"+
    "\12\10\1\105\2\10\1\106\10\10\5\0\1\10\2\0"+
    "\5\10\2\0\5\10\5\0\1\10\7\0\3\10\1\107"+
    "\22\10\5\0\1\10\2\0\5\10\2\0\5\10\5\0"+
    "\1\10\7\0\14\10\1\110\11\10\5\0\1\10\2\0"+
    "\5\10\2\0\1\111\4\10\5\0\1\10\7\0\26\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\10"+
    "\7\0\6\10\1\112\17\10\5\0\1\10\2\0\5\10"+
    "\2\0\1\10\1\113\3\10\5\0\1\10\7\0\26\10"+
    "\5\0\1\10\2\0\5\10\2\0\1\10\1\114\3\10"+
    "\5\0\1\10\7\0\26\10\5\0\1\10\2\0\5\10"+
    "\2\0\4\10\1\115\5\0\1\10\7\0\26\10\5\0"+
    "\1\10\2\0\5\10\2\0\5\10\5\0\1\10\7\0"+
    "\11\10\1\116\14\10\5\0\1\10\2\0\5\10\2\0"+
    "\5\10\5\0\1\10\7\0\4\10\1\117\21\10\5\0"+
    "\1\10\2\0\5\10\2\0\4\10\1\120\5\0\1\10"+
    "\7\0\26\10\5\0\1\10\2\0\5\10\2\0\5\10"+
    "\5\0\1\121\7\0\26\10\5\0\1\10\2\0\5\10"+
    "\2\0\5\10\5\0\1\10\7\0\21\10\1\122\4\10"+
    "\2\47\1\100\1\6\63\47\5\0\1\10\2\0\5\10"+
    "\2\0\5\10\5\0\1\10\7\0\3\10\1\123\22\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\10"+
    "\7\0\13\10\1\124\12\10\5\0\1\10\2\0\5\10"+
    "\2\0\4\10\1\125\5\0\1\10\7\0\26\10\5\0"+
    "\1\10\2\0\5\10\2\0\1\126\4\10\5\0\1\10"+
    "\7\0\26\10\5\0\1\10\2\0\5\10\2\0\5\10"+
    "\5\0\1\10\7\0\4\10\1\127\21\10\5\0\1\10"+
    "\2\0\5\10\2\0\5\10\5\0\1\10\7\0\3\10"+
    "\1\130\22\10\5\0\1\10\2\0\5\10\2\0\1\10"+
    "\1\131\3\10\5\0\1\10\7\0\3\10\1\132\22\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\10"+
    "\7\0\1\10\1\133\24\10\5\0\1\10\2\0\5\10"+
    "\2\0\5\10\5\0\1\10\7\0\5\10\1\134\20\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\10"+
    "\7\0\5\10\1\135\20\10\5\0\1\10\2\0\5\10"+
    "\2\0\1\10\1\136\3\10\5\0\1\10\7\0\26\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\10"+
    "\7\0\6\10\1\137\17\10\5\0\1\10\2\0\5\10"+
    "\2\0\5\10\5\0\1\10\7\0\12\10\1\140\13\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\10"+
    "\7\0\15\10\1\141\10\10\5\0\1\10\2\0\5\10"+
    "\2\0\5\10\5\0\1\10\7\0\22\10\1\142\3\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\10"+
    "\7\0\11\10\1\143\14\10\5\0\1\10\2\0\5\10"+
    "\2\0\5\10\5\0\1\10\7\0\5\10\1\144\20\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\145"+
    "\7\0\26\10\5\0\1\10\2\0\5\10\2\0\5\10"+
    "\5\0\1\10\7\0\1\146\25\10\5\0\1\10\2\0"+
    "\5\10\2\0\5\10\5\0\1\10\7\0\3\10\1\147"+
    "\22\10\5\0\1\10\2\0\5\10\2\0\5\10\5\0"+
    "\1\10\7\0\3\10\1\150\22\10\5\0\1\10\2\0"+
    "\5\10\2\0\5\10\5\0\1\10\7\0\3\10\1\151"+
    "\22\10\5\0\1\10\2\0\5\10\2\0\5\10\5\0"+
    "\1\10\7\0\4\10\1\152\21\10\5\0\1\10\2\0"+
    "\5\10\2\0\5\10\5\0\1\10\7\0\1\10\1\153"+
    "\24\10\5\0\1\10\2\0\5\10\2\0\5\10\5\0"+
    "\1\10\7\0\3\10\1\154\22\10\5\0\1\10\2\0"+
    "\5\10\2\0\5\10\5\0\1\10\7\0\16\10\1\155"+
    "\7\10\5\0\1\10\2\0\5\10\2\0\5\10\5\0"+
    "\1\10\7\0\23\10\1\156\2\10\5\0\1\10\2\0"+
    "\5\10\2\0\5\10\5\0\1\10\7\0\3\10\1\157"+
    "\22\10\5\0\1\10\2\0\5\10\2\0\5\10\5\0"+
    "\1\10\7\0\3\10\1\160\22\10\5\0\1\10\2\0"+
    "\5\10\2\0\1\161\4\10\5\0\1\10\7\0\26\10"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\10"+
    "\7\0\15\10\1\162\10\10\5\0\1\10\2\0\5\10"+
    "\2\0\1\163\4\10\5\0\1\10\7\0\26\10\5\0"+
    "\1\10\2\0\5\10\2\0\5\10\5\0\1\10\7\0"+
    "\24\10\1\164\1\10\5\0\1\10\2\0\5\10\2\0"+
    "\5\10\5\0\1\165\7\0\26\10\5\0\1\10\2\0"+
    "\5\10\2\0\5\10\5\0\1\10\7\0\4\10\1\166"+
    "\21\10\5\0\1\10\2\0\5\10\2\0\5\10\5\0"+
    "\1\10\7\0\13\10\1\167\12\10\5\0\1\10\2\0"+
    "\5\10\2\0\5\10\5\0\1\10\7\0\25\10\1\170"+
    "\5\0\1\10\2\0\5\10\2\0\5\10\5\0\1\171"+
    "\7\0\26\10\5\0\1\10\2\0\5\10\2\0\5\10"+
    "\5\0\1\10\7\0\3\10\1\172\22\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4510];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\3\11\4\1\2\11\6\1\2\11"+
    "\3\1\7\11\10\1\1\0\10\1\3\11\15\1\1\0"+
    "\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

int get_line(){	return yyline;}
int get_column(){	return yycolumn;}


private java_cup.runtime.Symbol symbol(int type) 
{
	return new java_cup.runtime.Symbol(type);
}
private java_cup.runtime.Symbol symbol(int type, Object value)
{
	return new java_cup.runtime.Symbol(type, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3466) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { /*异常*/ }");
            { /*异常*/
            } 
            // fall through
          case 49: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return symbol(sym.LPAREN); }");
            { return symbol(sym.LPAREN);
            } 
            // fall through
          case 50: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [45] { return symbol(sym.TIMES); }");
            { return symbol(sym.TIMES);
            } 
            // fall through
          case 51: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return symbol(sym.RPAREN); }");
            { return symbol(sym.RPAREN);
            } 
            // fall through
          case 52: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { /*Do nothing*/ }");
            { /*Do nothing*/
            } 
            // fall through
          case 53: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { if (yylength() > 24)"+ZZ_NL+"\t\t\t\t;/*异常*/"+ZZ_NL+"\t\t\treturn symbol(sym.IDENTIFIER, yytext()); }");
            { if (yylength() > 24)
				;/*异常*/
			return symbol(sym.IDENTIFIER, yytext());
            } 
            // fall through
          case 54: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { if (yylength() > 12)"+ZZ_NL+"\t\t\t\t;/*异常*/"+ZZ_NL+""+ZZ_NL+"\t\t\treturn symbol(sym.NUMBER, yytext()); }");
            { if (yylength() > 12)
				;/*异常*/

			return symbol(sym.NUMBER, yytext());
            } 
            // fall through
          case 55: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [43] { return symbol(sym.PLUS); }");
            { return symbol(sym.PLUS);
            } 
            // fall through
          case 56: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [44] { return symbol(sym.MINUS); }");
            { return symbol(sym.MINUS);
            } 
            // fall through
          case 57: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { return symbol(sym.COLON); }");
            { return symbol(sym.COLON);
            } 
            // fall through
          case 58: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return symbol(sym.EQ); }");
            { return symbol(sym.EQ);
            } 
            // fall through
          case 59: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return symbol(sym.NEQ); }");
            { return symbol(sym.NEQ);
            } 
            // fall through
          case 60: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [52] { return symbol(sym.LT); }");
            { return symbol(sym.LT);
            } 
            // fall through
          case 61: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { return symbol(sym.GT); }");
            { return symbol(sym.GT);
            } 
            // fall through
          case 62: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return symbol(sym.AND); }");
            { return symbol(sym.AND);
            } 
            // fall through
          case 63: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [58] { return symbol(sym.NOT); }");
            { return symbol(sym.NOT);
            } 
            // fall through
          case 64: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [60] { return symbol(sym.SEMI); }");
            { return symbol(sym.SEMI);
            } 
            // fall through
          case 65: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] { return symbol(sym.COMMA); }");
            { return symbol(sym.COMMA);
            } 
            // fall through
          case 66: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return symbol(sym.PERIOD); }");
            { return symbol(sym.PERIOD);
            } 
            // fall through
          case 67: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return symbol(sym.LBRACKET); }");
            { return symbol(sym.LBRACKET);
            } 
            // fall through
          case 68: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return symbol(sym.RBRACKET); }");
            { return symbol(sym.RBRACKET);
            } 
            // fall through
          case 69: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return symbol(sym.DO); }");
            { return symbol(sym.DO);
            } 
            // fall through
          case 70: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { return symbol(sym.IF); }");
            { return symbol(sym.IF);
            } 
            // fall through
          case 71: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return symbol(sym.OR); }");
            { return symbol(sym.OR);
            } 
            // fall through
          case 72: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return symbol(sym.OF); }");
            { return symbol(sym.OF);
            } 
            // fall through
          case 73: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return symbol(sym.ASSIGN); }");
            { return symbol(sym.ASSIGN);
            } 
            // fall through
          case 74: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { return symbol(sym.LE); }");
            { return symbol(sym.LE);
            } 
            // fall through
          case 75: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return symbol(sym.GE); }");
            { return symbol(sym.GE);
            } 
            // fall through
          case 76: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [46] { return symbol(sym.DIVIDE); }");
            { return symbol(sym.DIVIDE);
            } 
            // fall through
          case 77: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return symbol(sym.VAR); }");
            { return symbol(sym.VAR);
            } 
            // fall through
          case 78: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [47] { return symbol(sym.MOD); }");
            { return symbol(sym.MOD);
            } 
            // fall through
          case 79: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return symbol(sym.END); }");
            { return symbol(sym.END);
            } 
            // fall through
          case 80: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return symbol(sym.READ); }");
            { return symbol(sym.READ);
            } 
            // fall through
          case 81: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return symbol(sym.THEN); }");
            { return symbol(sym.THEN);
            } 
            // fall through
          case 82: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return symbol(sym.TYPE); }");
            { return symbol(sym.TYPE);
            } 
            // fall through
          case 83: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return symbol(sym.ELSE); }");
            { return symbol(sym.ELSE);
            } 
            // fall through
          case 84: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return symbol(sym.ELSIF); }");
            { return symbol(sym.ELSIF);
            } 
            // fall through
          case 85: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return symbol(sym.WRITE); }");
            { return symbol(sym.WRITE);
            } 
            // fall through
          case 86: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return symbol(sym.WHILE); }");
            { return symbol(sym.WHILE);
            } 
            // fall through
          case 87: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return symbol(sym.BEGIN); }");
            { return symbol(sym.BEGIN);
            } 
            // fall through
          case 88: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return symbol(sym.CONST); }");
            { return symbol(sym.CONST);
            } 
            // fall through
          case 89: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return symbol(sym.ARRAY); }");
            { return symbol(sym.ARRAY);
            } 
            // fall through
          case 90: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return symbol(sym.MODULE); }");
            { return symbol(sym.MODULE);
            } 
            // fall through
          case 91: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return symbol(sym.RECORD); }");
            { return symbol(sym.RECORD);
            } 
            // fall through
          case 92: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return symbol(sym.INTEGER); }");
            { return symbol(sym.INTEGER);
            } 
            // fall through
          case 93: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return symbol(sym.BOOLEAN); }");
            { return symbol(sym.BOOLEAN);
            } 
            // fall through
          case 94: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return symbol(sym.WRITELN); }");
            { return symbol(sym.WRITELN);
            } 
            // fall through
          case 95: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return symbol(sym.PROCEDURE); }");
            { return symbol(sym.PROCEDURE);
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
